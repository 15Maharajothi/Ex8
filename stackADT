 import java.util.ArrayList;

public class SynchronizedStack<T> {
    private ArrayList<T> stack = new ArrayList<>();
    private int maxSize;

    public SynchronizedStack(int maxSize) {
        this.maxSize = maxSize;
    }

    public synchronized void push(T item) {
        while (stack.size() >= maxSize) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        stack.add(item);
        notifyAll(); 
    }

    public synchronized T pop() {
        while (stack.isEmpty()) {
            try {
                wait(); 
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        T item = stack.remove(stack.size() - 1);
        notifyAll(); 
        return item;
    }

    public synchronized boolean isEmpty() {
        return stack.isEmpty();
    }

    public synchronized int size() {
        return stack.size();
    }
}

class StackDemo {
    public static void main(String[] args) {
        SynchronizedStack<Integer> stack = new SynchronizedStack<>(5);

        Runnable producer = () -> {
            for (int i = 0; i < 10; i++) {
                stack.push(i);
                System.out.println("Pushed: " + i);
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        };

        Runnable consumer = () -> {
            for (int i = 0; i < 10; i++) {
                int item = stack.pop();
                System.out.println("Popped: " + item);
                try {
                    Thread.sleep(200);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
        };

        Thread producerThread = new Thread(producer);
        Thread consumerThread = new Thread(consumer);

        producerThread.start();
        consumerThread.start();
    }
}
